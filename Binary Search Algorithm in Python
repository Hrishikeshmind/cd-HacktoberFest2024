Problem:
You are given a sorted array of integers, and you need to find the position (index) of a target integer using binary search. If the target does not exist in the array, return -1.

Plan (Pseudocode):
Initialize two pointers, low and high, pointing to the start and end of the array.
While low is less than or equal to high:
Calculate the middle index: mid = (low + high) // 2.
If the element at mid is equal to the target, return mid.
If the element at mid is greater than the target, search the left half by setting high = mid - 1.
If the element at mid is less than the target, search the right half by setting low = mid + 1.
If the target is not found, return -1.


def binary_search(arr, target):
    low = 0
    high = len(arr) - 1
    
    while low <= high:
        mid = (low + high) // 2
        
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    
    return -1

if __name__ == "__main__":
   
    sorted_array = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
    
    
    target = 7
    result = binary_search(sorted_array, target)
    
    if result != -1:
        print(f"Target {target} found at index {result}.")
    else:
        print(f"Target {target} not found in the array.")
